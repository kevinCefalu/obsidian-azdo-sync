import esbuild from "esbuild";
import process from "process";
import fs from "fs";
import builtins from "builtin-modules";
import copyStaticFiles from "esbuild-copy-static-files";
import pkg from "../package.json" assert { type: "json" };
import mft from "../src/assets/manifest.json" assert { type: "json" };

const prod = process.argv[2] === "production";
const homepageUrl = pkg.homepage || "";
const outputDir = `dist/${mft.id}`;
const banner = `
/*
--------------------------------------------------------------
------- THIS IS A GENERATED/BUNDLED FILE BY ESBUILD ----------
--------------------------------------------------------------
Source Code: ${homepageUrl}
--------------------------------------------------------------
*/
`;

fs.rm(outputDir, { recursive: true }, (err) => { });

const context = await esbuild.context({
  banner: {
    js: banner,
    css: banner,
  },
  footer: {
    js: banner,
    css: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: !prod,
  treeShaking: true,
  outdir: outputDir,

  loader: {
    '.template.md': 'text',
  },
  plugins: [
    copyStaticFiles({
      src: 'src/assets',
      dest: outputDir,
      dereference: true,
      errorOnExist: false,
      preserveTimestamps: true,
      recursive: true,
    })
  ],
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
